#!/bin/bash
#Creating first argument, User should type "-h" for help, which will show all echo messages. User can type any character or string. 
if [[ $1 == "-h" || $1 == "" || $1 == "-H" ]]; then
    echo -e "\nUsage: get_SeqRec [-F|-P] [QUERY_ORGANISM|\"Q_Genus Q_species\"] [SEQ_METHOD]"
    echo -e "\nExamples: get_SeqRec -P \"dog\" WGS | get_SeqRec -F \"Canis lupis familaris\" RAD-Seq"
    echo -e "\noption flags:"
    echo -e "  -h|-H\tPrints this help message. This message will also print when get_SeqRec is called with no arguments"
    echo -e "  -P\tPartial mode: The script will provide a tab delimited table including SRR & SRS, library information, Scientific Name, sequencer information, and consent information for the organism; use awk/grep on provided SRA_info file to create filtered lists to provide to sequence downloader, pull_SeqRec. Alternately, see the full mode flag. Field is case-sensitive"
    echo -e "  -F\tFull mode: The script will create the same files as partial mode as well as a file with a list of run IDs from queried organism and it downloads specified sequence reads; This script requires SRA Toolkit, please load local/cluster module. When running get_SeqReads in full mode library strategy must be included after search organism. Field is case-sensitive."
    echo -e "\narguments:"
    echo -e "  [QUERY_ORGANISM]\t:Enter search query organism for lists of sequence run archive information; Use quotes around query input"
    echo -e "  [SEQ_METHOD]\t: Enter a single sequencing method to filter results. Field is case-sensitive: [WGS|WXS|AMPLICON|RNA-Seq|RAD-Seq|ChIP-Seq|Hi-C]"
    exit 0
#This module is created for taking user input. Based upon user's input this module will print the above lines in command line interface.

elif [[ $# -lt 3 ]]; then

    echo "Please indicate -F or -P for full or partial run, followed by a search organism, followed by a library strategy for a table of NCBI's sequence information. Try -h for help"
    exit 0

elif [[ $1 == "-P" ]]; then
    org=$2
    genus=$(echo $org|awk '{print $1}')
    species=$(echo $org|awk '{print $2}')
    cdate=$(date|awk '{OFS="_"}{print $2,$3}')
    mkdir $genus$species~$cdate
    cd $genus$species~$cdate
    echo ""
    echo "Moving into $genus$species~$cdate/ ..."
    echo ""
    echo ""
    echo "========================================================================================================================="
    echo "Running Grab-N-Go Genomes in partial mode. All SRA search results for $org with public consent and SRR prefix will output to $genus$species~full_SRA_info_$cdate.txt"
    echo "Use awk/grep to filter output and run pull_SeqRec Q_ORGN."
    echo ""
    echo ""
    echo "Run_ID    Lib_Size(MB)    Lib_Type    Sample_ID    Scientific_Name    Sequencing_Platform    Model    Consent        $cdate" > $genus$species~full_SRA_info_$cdate.txt
    esearch -db sra -query "$org [ORGN]"|
    efetch -format runinfo -mode xml |
    xtract -pattern Row -tab "\t" -sep "," -def "BLANK" -element Run size_MB LibraryStrategy Sample ScientificName Platform Model Consent|
    awk -F "\t" '$8 == "public" {print $0}' | awk -F "\t" '/^SRR/ {print $0}'>> $genus$species~full_SRA_info_$cdate.txt
    Entries=$(tail -n +2 $genus$species~full_SRA_info_$cdate.txt | wc -l)
    echo "$Entries entries found. See $genus$species~full_SRA_info_$cdate.txt for more information."
    echo ""
    echo "To decrease downloading time, filtered output file for sequencing strategy indicated will be written to $genus$species~filtered_SRA_info_$cdate.txt. Use this file to create a list of SRR IDs as input for pull_SeqRec.sh"
    echo "See line 87 of this script for command structure to produce input list for pull_SeqRec"
    strat=$3
    echo ""
    echo "Strategy used: $strat"
    echo "Run_ID    Lib_Size(MB)    Lib_Type    Sample_ID    Scientific_Name    Sequencing_Platform    Model    Consent        $cdate" > $genus$species~filtered_SRA_info_$cdate.txt
    awk '$3 == "'$strat'" {print $0}' $genus$species~full_SRA_info_$cdate.txt >> $genus$species~filtered_SRA_info_$cdate.txt
    Entries=$(tail -n +2 $genus$species~filtered_SRA_info_$cdate.txt | wc -l)
    echo "$Entries entries retain after filtering for $strat reads. See $genus$species~filtered_SRA_info_$cdate.txt for more information."
    echo ""
    exit 0



elif [[ $1 == "-F" ]]; then

    org=$2
    genus=$(echo $org|awk '{print $1}')
    species=$(echo $org|awk '{print $2}')
    cdate=$(date|awk '{OFS="_"}{print $2,$3}')
    mkdir $genus$species~$cdate
    cd $genus$species~$cdate
    echo ""
    echo "Moving into $genus$species~$cdate/ ..."
    echo ""
    echo ""
    echo "========================================================================================================================="
    echo "Running Grab-N-Go Genomes in full mode. SRA search results in $genus$species~full_SRA_info_$cdate.txt will be filtered by user-specified sequencing method."
    echo "Filtered SRA info will be printed to $genus$species~filtered_SRA_info_$cdate.txt and used to create a list of SRR IDs, $genus$species~run_accession_$cdate.txt"
    echo "for downloading sequences to the directory $genus$species~files_$cdate/"
    echo ""
    echo ""
    echo "Run_ID    Lib_Size(MB)    Lib_Type    Sample_ID    Scientific_Name    Sequencing_Platform    Model    Consent        $cdate" > $genus$species~full_SRA_info_$cdate.txt
    esearch -db sra -query "$org [ORGN]"|
    efetch -format runinfo -mode xml |
    xtract -pattern Row -tab "\t" -sep "," -def "BLANK" -element Run size_MB LibraryStrategy Sample ScientificName Platform Model Consent |
    awk -F "\t" '$8 == "public" {print $0}' | awk -F "\t" '/^SRR/ {print $0}' >> $genus$species~full_SRA_info_$cdate.txt
    Entries=$(tail -n +2 $genus$species~full_SRA_info_$cdate.txt | wc -l)
    echo "$Entries entries found. See $genus$species~full_SRA_info_$cdate.txt for more information."
    echo ""
    echo ""
    strat=$3
    echo ""
    echo "Strategy used: $strat"
    echo "Run_ID    Lib_Size(MB)    Lib_Type    Sample_ID    Scientific_Name    Sequencing_Platform    Model    Consent        $cdate" > $genus$species~filtered_SRA_info_$cdate.txt
    awk '$3 == "'$strat'" {print $0}' $genus$species~full_SRA_info_$cdate.txt >> $genus$species~filtered_SRA_info_$cdate.txt
    Entries=$(tail -n +2 $genus$species~filtered_SRA_info_$cdate.txt | wc -l)
    echo "$Entries entries retain after filtering for $strat reads. See $genus$species~filtered_SRA_info_$cdate.txt for more information."
    echo ""
    echo ""
    echo "Creating SRR list from $genus$species~filtered_SRA_info_$cdate.txt ..."
    echo ""
    awk '{print $1}' $genus$species~filtered_SRA_info_$cdate.txt| tail -n +2 > $genus$species~run_accession_$cdate.txt
fi


runs="$genus$species~run_accession_$cdate.txt"
if [[ ! -s $runs ]]; then
    echo "File is empty. SRR list not created in previous step, or no sequences were found for your query to download. Please check intermediate files."
    exit 0
else
    asc="sra/2.8.1"
    pbs="sratoolkit/2.8.0"
    if [ "${HOSTNAME:0:9}" == "dmcvlogin" ]; then
        module load $asc
        echo "Loaded SRA Toolkit: $asc "
    elif [ -n "$PBS_JOBNAME" ]; then
            module load $pbs
        echo "Loaded SRA Toolkit: $pbs "
    fi
    mkdir $genus$species~files_$cdate
    sd="./$genus$species~files_$cdate/"
    echo ""
    echo "Created the following directory for sequencing reads: $sd"
    echo " "
    echo "====================================================="

    add=0
    for run in $(cat $runs ); do
            let add++
            tot=$(cat $runs|wc -l)
            fastq-dump -v --split-files -I --gzip -O $sd $run

            echo "$add of $tot sequences downloaded to $sd"
            echo "----------------------------------------"
    done

    echo " "
    echo "====================================================="
    echo "Download Complete! Sequences can be found in $sd"

fi
